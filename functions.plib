use POSIX qw(strftime);

##
## Функции
##
sub _dechunk
{
  my $chunks = shift;
  my $item   = shift(@{$chunks});

  # Словари
  if( $item eq 'd' ) {
    $item = shift(@{$chunks});
    my %hash;

    while( $item ne 'e' ) {
      unshift(@{$chunks}, $item);
      my $key = _dechunk($chunks);
      $hash{$key} = _dechunk($chunks);
      $item = shift(@{$chunks});
    }

    return \%hash;
  }

  # Списки
  if( $item eq 'l' ) {
    $item = shift(@{$chunks});
    my @list;

    while( $item ne 'e' ) {
      unshift(@{$chunks}, $item);
      push(@list, _dechunk($chunks));
      $item = shift(@{$chunks});
    }

    return \@list;
  }

  # Числа
  if( $item eq 'i' ) {
    my $num;
    $item = shift(@{$chunks});

    while( $item ne 'e' ) {
      $num .= $item;
      $item = shift(@{$chunks});
    }

    return $num;
  }

  # Строки
  if( $item =~ /\d/ ) {
    my $num;

    while( $item =~ /\d/ ) {
      $num .= $item;
      $item = shift(@{$chunks});
    }

    my $line = '';

    for( 1 .. $num ) {
      $line .= shift(@{$chunks});
    }

    return $line;
  }

  return $chunks;
}

sub bencode
{
  no locale;
  my $s    = shift;
  my $line = '';

  # Словари
  if( ref($s) eq 'HASH' ) {
    $line = 'd';

    foreach my $key (sort(keys %{$s})) {
      $line .= bencode($key);
      $line .= bencode(${$s}{$key});
    }

    $line .= 'e';
    return $line;
  }

  # Списки
  if( ref($s) eq 'ARRAY' ) {
    $line = 'l';

    foreach my $l (@{$s}) {
      $line .= bencode($l);
    }

    $line .= 'e';
    return $line;
  }

  # Числа
  if( $s =~ /^\d+$/ ) {
    return sprintf('i%de', $s);
  }

  # Строки
  return sprintf('%d:%s', length($s), $s);
}

sub bdecode
{
  my $s      = shift;
  my @chunks = split(//, $s);
  my $root   = _dechunk(\@chunks);
  return $root;
}
###############################################################################

#
# Сообщение трекера
#
sub btt_msg
{
  my($session, $msg) = @_;

  print $session "HTTP/1.1 200 OK\r\nDate: " . strftime('%a, %e %b %Y %H:%M:%S GMT', gmtime) . "\r\nServer: bt.ivacuum.ru/1.0\r\nConnection: close\r\nContent-type: text/plain\r\n\r\n" . bencode($msg);

  return &close_connection($session);
}

#
# Ошибка трекера
#
sub btt_msg_die
{
  my($session, $msg) = @_;

  return &close_connection($session) if($event eq 'stopped');

  print $session "HTTP/1.1 200 OK\r\nDate: " . strftime('%a, %e %b %Y %H:%M:%S GMT', gmtime) . "\r\nServer: bt.ivacuum.ru/1.0\r\nConnection: close\r\nContent-type: text/plain\r\n\r\n" . bencode({
    'min interval'   => $g_announce_interval,
    'failure reason' => $msg,
    'warning reason' => $msg
  });

  return &close_connection($session);
}

#
# Завершение сеанса связи с клиентом
#
sub close_connection
{
  my($session) = @_;

  $session->flush();
  shutdown $session, 2;

  return 0;
}

#
# Продолжительность
#
sub date_format
{
  my $timestamp = shift;

  return sprintf('%d дн. %02d:%02d:%02d', $timestamp / 86400, $timestamp / 3600 % 24, $timestamp / 60 % 60, $timestamp % 60);
}

#
# Удаление пира
#
sub delete_peer
{
  my($info_hash, $peer_hash, $seeder) = @_;

  if( defined $g_files{$info_hash}{'peers'}{$peer_hash} ) {
    delete $g_files{$info_hash}{'peers'}{$peer_hash};

    $g_files{$info_hash}{'seeders'}-- if($seeder);
    $g_files{$info_hash}{'leechers'}-- if(!$seeder);
  }

  if( defined $g_peers{$peer_hash} ) {
    delete $g_peers{$peer_hash};
  }
}

#
# Текущая метка времени
#
sub get_timestamp
{
  my($format) = @_;
  my($sec, $min, $hour, $mday, $mon, $year) = localtime(EV::now);

  $format = '%04d-%02d-%02d %02d:%02d:%02d' unless($format);

  return sprintf($format, $year + 1900, $mon + 1, $mday, $hour, $min, $sec);
}

#
# converts an IP address x.x.x.x into a long IP number as used by ulog
#
sub ip2long
{
  my $ip_address = shift;

  my(@octets, $octet, $ip_number, $number_convert);

  chomp($ip_address);
  @octets = split(/\./, $ip_address);
  $ip_number = 0;

  foreach $octet (@octets) {
    $ip_number <<= 8;
    $ip_number |= $octet;
  }

  return $ip_number;
}

#
# Сообщение трекера
#
sub html_msg
{
  my($session, $title, $msg) = @_;

  print $session "HTTP/1.1 200 OK\r\nDate: " . strftime('%a, %e %b %Y %H:%M:%S GMT', gmtime) . "\r\nServer: bt.ivacuum.ru/1.0\r\nConnection: close\r\nContent-type: text/html; charset=utf-8\r\nCache-Control: no-cache, pre-check=0, post-check=0\r\nExpires: Fri, 1 Jan 2010 00:00:00 GMT\r\nPragma: no-cache\r\n\r\n".'<!DOCTYPE html><html lang="ru"><head><meta charset="utf-8"><title>' . $title . '</title><link rel="shortcut icon" href="//ivacuum.org/i/_/server_network.png"><link rel="stylesheet" href="//ivacuum.org/i/bootstrap/2.0.0/style.css"><link rel="stylesheet" href="//ivacuum.org/i/bootstrap/2.0.0/expansion.css"></head><body><div class="navbar navbar-fixed-top"><div class="navbar-inner"><div class="container"><a class="brand" href="/stats">btrt.ivacuum.ru</a></div></div></div><div class="container">' . $msg . '</div></body></html>';

  return &close_connection($session);
}

sub html_msg_simple
{
  my($session, $msg) = @_;

  print $session "HTTP/1.1 200 OK\r\nDate: " . strftime('%a, %e %b %Y %H:%M:%S GMT', gmtime) . "\r\nServer: bt.ivacuum.ru/1.0\r\nConnection: close\r\nContent-type: text/html; charset=utf-8\r\nCache-Control: no-cache, pre-check=0, post-check=0\r\nExpires: Fri, 1 Jan 2010 00:00:00 GMT\r\nPragma: no-cache\r\n\r\n" . $msg;

  return &close_connection($session);
}

#
# Форматирование числа
#
sub num_format
{
  local $_ = shift;
  1 while s/^(-?\d+)(\d{3})/$1 $2/;
  return $_;
}

#
# Выделение из строки пар ключ=значение
#
sub parse_qs
{
  my $s     = shift;
  my @pairs = split(/&/, $s);
  my %hash;

  foreach my $pair (@pairs) {
    next unless $pair;
    my($key, $value) = split(/=/, $pair);
    $hash{$key} = $value;
  }

  return %hash;
}

#
# Выводит информацию о событии (при $g_debug > 0)
#
sub print_event
{
  my($code, $text) = @_;

  printf("%s: %s: %s\n", &get_timestamp(), $code, $text) if($g_debug > 1 or $code eq 'CORE');
}

#
# Завершение работы ретрекера
#
sub retracker_shutdown
{
  my($signal) = @_;

  print "\n";
  &print_event('CORE', 'Получен сигнал: ' . $signal);
  &print_event('CORE', 'Завершение работы ретрекера...');
  EV::break;
  exit(0);
}